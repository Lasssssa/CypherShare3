"use client";

import { useState } from "react";
import { FileEncryption } from "@/lib/encryption";
import { DecryptionStorage } from "@/services/DecryptionStorage";

/**
 * Hook personnalis√© pour le d√©chiffrement de fichiers
 * Simplifi√© avec IV stock√© dans le fichier
 */

export interface DecryptionResult {
  success: boolean;
  fileName?: string;
  fileSize?: number;
  downloadUrl?: string;
  error?: string;
}

export const useFileDecryption = () => {
  const [isDecrypting, setIsDecrypting] = useState(false);
  const [result, setResult] = useState<DecryptionResult | null>(null);

  /**
   * D√©chiffre un fichier √† partir du CID et de la cl√© AES (IV extrait automatiquement)
   */
  const decryptFile = async (cid: string, aesKeyHex: string): Promise<void> => {
    setIsDecrypting(true);
    setResult(null);

    try {
      console.log("üîì D√©but du d√©chiffrement");
      console.log("üìç CID:", cid);
      console.log("üîë Cl√© AES:", aesKeyHex);
      console.log("üì¶ NOUVEAU: IV sera extrait automatiquement du fichier");

      // T√©l√©charger le fichier chiffr√© depuis Lighthouse
      const response = await fetch(
        `https://gateway.lighthouse.storage/ipfs/${cid}`
      );
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const encryptedFileWithIV = await response.arrayBuffer();
      console.log(
        "üì¶ Fichier t√©l√©charg√©:",
        encryptedFileWithIV.byteLength,
        "bytes"
      );

      // Convertir la cl√© hex en Uint8Array
      const aesKey = FileEncryption.hexToKey(aesKeyHex);

      // D√©chiffrer le fichier (l'IV sera extrait automatiquement)
      const decryptedData = await FileEncryption.decryptFile(
        encryptedFileWithIV,
        aesKey
      );

      // R√©cup√©rer les m√©tadonn√©es si disponibles
      const metadata = DecryptionStorage.getByCid(cid);
      const fileName = metadata?.fileName || "decrypted_file";

      // Cr√©er un blob et URL de t√©l√©chargement
      const blob = FileEncryption.createBlobFromDecrypted(
        decryptedData,
        fileName
      );
      const downloadUrl = URL.createObjectURL(blob);

      setResult({
        success: true,
        fileName,
        fileSize: decryptedData.byteLength,
        downloadUrl,
      });

      console.log(
        "‚úÖ D√©chiffrement r√©ussi:",
        fileName,
        `(${decryptedData.byteLength} bytes)`
      );
    } catch (error) {
      const errorMessage =
        error instanceof Error ? error.message : "Unknown error";
      console.error("‚ùå Erreur d√©chiffrement:", errorMessage);

      setResult({
        success: false,
        error: errorMessage,
      });
    } finally {
      setIsDecrypting(false);
    }
  };

  /**
   * M√©thode de d√©chiffrement avec IV s√©par√© (pour compatibilit√© avec anciens fichiers)
   */
  const decryptFileWithSeparateIV = async (
    cid: string,
    aesKeyHex: string,
    ivHex: string
  ): Promise<void> => {
    setIsDecrypting(true);
    setResult(null);

    try {
      console.log("üîì D√©chiffrement avec IV s√©par√© (mode compatibilit√©)");
      console.log("üìç CID:", cid);
      console.log("üîë Cl√© AES:", aesKeyHex);
      console.log("üé≤ IV:", ivHex);

      // T√©l√©charger le fichier chiffr√©
      const response = await fetch(
        `https://gateway.lighthouse.storage/ipfs/${cid}`
      );
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const encryptedData = await response.arrayBuffer();

      // Convertir les cl√©s hex
      const aesKey = FileEncryption.hexToKey(aesKeyHex);
      const iv = FileEncryption.hexToIV(ivHex);

      // D√©chiffrer avec IV s√©par√©
      const decryptedData = await FileEncryption.decryptFileWithSeparateIV(
        encryptedData,
        aesKey,
        iv
      );

      // R√©cup√©rer les m√©tadonn√©es
      const metadata = DecryptionStorage.getByCid(cid);
      const fileName = metadata?.fileName || "decrypted_file";

      // Cr√©er le blob et URL
      const blob = FileEncryption.createBlobFromDecrypted(
        decryptedData,
        fileName
      );
      const downloadUrl = URL.createObjectURL(blob);

      setResult({
        success: true,
        fileName,
        fileSize: decryptedData.byteLength,
        downloadUrl,
      });

      console.log("‚úÖ D√©chiffrement r√©ussi (IV s√©par√©):", fileName);
    } catch (error) {
      const errorMessage =
        error instanceof Error ? error.message : "Unknown error";
      console.error("‚ùå Erreur d√©chiffrement:", errorMessage);

      setResult({
        success: false,
        error: errorMessage,
      });
    } finally {
      setIsDecrypting(false);
    }
  };

  /**
   * D√©chiffre automatiquement √† partir du CID (utilise les m√©tadonn√©es stock√©es)
   */
  const decryptFromMetadata = async (cid: string): Promise<void> => {
    const metadata = DecryptionStorage.getByCid(cid);

    if (!metadata) {
      setResult({
        success: false,
        error: "No stored metadata found for this CID",
      });
      return;
    }

    await decryptFile(cid, metadata.aesKey);
  };

  /**
   * Nettoie l'URL de t√©l√©chargement
   */
  const cleanupDownloadUrl = () => {
    if (result?.downloadUrl) {
      URL.revokeObjectURL(result.downloadUrl);
    }
    setResult(null);
  };

  /**
   * Remet √† z√©ro le r√©sultat
   */
  const reset = () => {
    cleanupDownloadUrl();
    setResult(null);
  };

  return {
    isDecrypting,
    result,
    decryptFile,
    decryptFileWithSeparateIV,
    decryptFromMetadata,
    cleanupDownloadUrl,
    reset,
  };
};
